=== If no file names and line numbers are shown below, one can run
            addr2line -Cpfie my_exefile my_line_address
    to convert `my_line_address` (e.g., 0x4a6b) into file name and line number.
    Or one can use amrex/Tools/Backtrace/parse_bt.py.

=== Please note that the line number reported by addr2line may not be accurate.
    One can use
            readelf -wl my_exefile | grep my_line_address'
    to find out the offset for that line.

 0: ./amr2d.gnu.MPI.ex(+0x207ee4) [0x55a3bd7f8ee4]
    amrex::BLBackTrace::print_backtrace_info(_IO_FILE*) at /home/cdt1903/IAMR/Exec/threefluidbubble/../../../amrex/Src/Base/AMReX_BLBackTrace.cpp:174

 1: ./amr2d.gnu.MPI.ex(+0x209e7f) [0x55a3bd7fae7f]
    amrex::BLBackTrace::handler(int) at /home/cdt1903/IAMR/Exec/threefluidbubble/../../../amrex/Src/Base/AMReX_BLBackTrace.cpp:80

 2: ./amr2d.gnu.MPI.ex(+0x2c7684) [0x55a3bd8b8684]
    amrex::MLMG::solve(amrex::Vector<amrex::MultiFab*, std::allocator<amrex::MultiFab*> > const&, amrex::Vector<amrex::MultiFab const*, std::allocator<amrex::MultiFab const*> > const&, double, double, char const*) at /home/cdt1903/IAMR/Exec/threefluidbubble/../../../amrex/Src/Base/AMReX.H:163
 (inlined by) amrex::MLMG::solve(amrex::Vector<amrex::MultiFab*, std::allocator<amrex::MultiFab*> > const&, amrex::Vector<amrex::MultiFab const*, std::allocator<amrex::MultiFab const*> > const&, double, double, char const*) at /home/cdt1903/IAMR/Exec/threefluidbubble/../../../amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp:192

 3: ./amr2d.gnu.MPI.ex(+0x35c3ba) [0x55a3bd94d3ba]
    ?? ??:0

 4: ./amr2d.gnu.MPI.ex(+0xe31b1) [0x55a3bd6d41b1]
    ?? ??:0

 5: ./amr2d.gnu.MPI.ex(+0xc9ad6) [0x55a3bd6baad6]
    MacProj::mac_project(int, amrex::MultiFab*, amrex::MultiFab&, double, double, amrex::MultiFab const&, int, amrex::BCRec const&, bool) at /home/cdt1903/IAMR/Exec/threefluidbubble/../../Source/MacProj.cpp:401 (discriminator 4)

 6: ./amr2d.gnu.MPI.ex(+0x93a08) [0x55a3bd684a08]
    NavierStokesBase::mac_project(double, double, amrex::MultiFab&, amrex::MultiFab*, int, bool) at /home/cdt1903/IAMR/Exec/threefluidbubble/../../Source/NavierStokesBase.cpp:2747

 7: ./amr2d.gnu.MPI.ex(+0x6d64f) [0x55a3bd65e64f]
    NavierStokes::advance(double, double, int, int) at /home/cdt1903/IAMR/Exec/threefluidbubble/../../Source/NavierStokes.cpp:1386

 8: ./amr2d.gnu.MPI.ex(+0x63b1d) [0x55a3bd654b1d]
    NavierStokes::post_init_press(double&, amrex::Vector<int, std::allocator<int> >&, amrex::Vector<double, std::allocator<double> >&) at /home/cdt1903/IAMR/Exec/threefluidbubble/../../Source/NavierStokes.cpp:2785

 9: ./amr2d.gnu.MPI.ex(+0x645f6) [0x55a3bd6555f6]
    NavierStokes::post_init(double) at /home/cdt1903/IAMR/Exec/threefluidbubble/../../Source/NavierStokes.cpp:2715

10: ./amr2d.gnu.MPI.ex(+0x266161) [0x55a3bd857161]
    amrex::Amr::FinalizeInit(double, double) at /home/cdt1903/IAMR/Exec/threefluidbubble/../../../amrex/Src/Amr/AMReX_Amr.cpp:1327 (discriminator 2)

11: ./amr2d.gnu.MPI.ex(+0x26b66d) [0x55a3bd85c66d]
    amrex::Amr::init(double, double) at /home/cdt1903/IAMR/Exec/threefluidbubble/../../../amrex/Src/Amr/AMReX_Amr.cpp:1121

12: ./amr2d.gnu.MPI.ex(+0x1338c) [0x55a3bd60438c]
    main at /home/cdt1903/IAMR/Exec/threefluidbubble/../../Source/main.cpp:92

13: /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xe7) [0x7efe01467b97]

14: ./amr2d.gnu.MPI.ex(+0x1897a) [0x55a3bd60997a]
    ?? ??:0

