
#*******************************************************************************
# INPUTS.2D.BUBBLE
#*******************************************************************************

#godunov.ppm_type=0
#godunov.slope_order=2
#godunov.use_forces_in_trans=1

#ns.velocity_plotfile=plt00005

#ns.do_mom_diff=1
#ns.predict_mom_together=1

ns.do_denminmax=0
#ns.init_iter=0
ns.sum_interval = 0

fabarray.mfiter_tile_size = 256 256 8 

#NOTE: You may set *either* max_step or stop_time, or you may set them both.

# Maximum number of coarse grid timesteps to be taken, if stop_time is
#  not reached first.
max_step 		= 10
# Time at which calculation stops, if max_step is not reached first.
stop_time 		= -1

# Use the tracer for the refinement criterion
ns.do_tracer_ref = 1
ns.do_vorticity_ref = 1
ns.do_scalminmax = 0
ns.do_trac2  = 0
ns.do_trac3  = 0
ns.getForceVerbose = 1

#*******************************************************************************

# Number of cells in each coordinate direction at the coarsest level
#amr.n_cell 		= 16 32 
amr.n_cell 		= 256 256
amr.max_grid_size	= 512

#*******************************************************************************

# Maximum level (defaults to 0 for single level calculation)
#amr.max_level		= 2 # maximum number of levels of refinement
amr.max_level		= 0 # maximum number of levels of refinement

#*******************************************************************************

# Interval (in number of level l timesteps) between regridding
amr.regrid_int		= 2 

#*******************************************************************************

# Refinement ratio as a function of level
amr.ref_ratio		= 2 2 2 2

#*******************************************************************************

# Sets the "NavierStokes" code to be verbose
ns.v                    = 1

#*******************************************************************************

# Sets the "amr" code to be verbose
amr.v                   = 1

#*******************************************************************************

# Interval (in number of coarse timesteps) between checkpoint(restart) files
amr.check_int		= 10 
#amr.restart 		= chk01540
ns.init_iter= 0
ns.do_init_proj=0
#*******************************************************************************

# Interval (in number of coarse timesteps) between plot files
amr.plot_int		= 1

#*******************************************************************************

# CFL number to be used in calculating the time step : dt = dx / max(velocity)
ns.cfl                  = 0.5  # CFL number used to set dt
ns.testNumber 		= 18
ns.R			= 0.02
ns.x0			= 0.03
ns.y0			= 0.03

ns.rho2			= 1.0
ns.rho1			= 0.5
ns.muL			= 1.1377e-3
ns.muG			= 1.77625e-5
ns.do_variable_visc 	= 0
#*******************************************************************************

# Factor by which the first time is shrunk relative to CFL constraint
ns.init_shrink          = 0.3  # factor which multiplies the very first time step

#*******************************************************************************

# Viscosity coefficient 
ns.vel_visc_coef        = 0.0
#ns.vel_visc_coef        = 0

#*******************************************************************************

# Diffusion coefficient for first scalar
ns.scal_diff_coefs      = 0.0
#ns.scal_diff_coefs      = 0.
#ns.init_dt 		= 0.0002

#*******************************************************************************

# Forcing term defaults to  rho * abs(gravity) "down"
ns.gravity              =  0.0 # -9.81
ns.sigma12		= 0.02361
#ns.gravity              = 0

#*******************************************************************************

# Name of the file which specifies problem-specific parameters (defaults to "probin")
amr.probin_file 	= probin.2d.bubble  

#*******************************************************************************

# Set to 0 if x-y coordinate system, set to 1 if r-z.
geometry.coord_sys   =  0

#*******************************************************************************

# Physical dimensions of the low end of the domain.
geometry.prob_lo     =  0. 0. 

# Physical dimensions of the high end of the domain.
geometry.prob_hi     =  0.06 0.06 
#*******************************************************************************

#Set to 1 if periodic in that direction
geometry.is_periodic =  1 1

#*******************************************************************************

# Boundary conditions on the low end of the domain.
ns.lo_bc             = 0 0  

# Boundary conditions on the high end of the domain.
ns.hi_bc             = 0 0  

# 0 = Interior/Periodic  3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

#*******************************************************************************

# For solver reasons, use multigrid iterations as the bottom solve.


#*******************************************************************************

# Factor by which grids must be coarsenable.
amr.blocking_factor     = 8

#*******************************************************************************

# Add vorticity to the variables in the plot files.
amr.derive_plot_vars    = ALL

#*******************************************************************************
